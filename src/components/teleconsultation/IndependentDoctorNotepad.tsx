'use client'

import { useState, useRef, useEffect } from 'react'
import {
  Save,
  Download,
  User,
  ChevronDown,
  Database,
  FileDown,
  Clock,
  CheckCircle,
  RotateCcw
} from 'lucide-react'

interface IndependentDoctorNotepadProps {
  patientName: string
}

export function IndependentDoctorNotepad({ patientName }: IndependentDoctorNotepadProps) {
  const [notes, setNotes] = useState('')
  const [isSaving, setIsSaving] = useState(false)
  const [savedMessage, setSavedMessage] = useState(false)
  const [isSaveDropdownOpen, setIsSaveDropdownOpen] = useState(false)
  const [isDownloading, setIsDownloading] = useState(false)
  const [wordCount, setWordCount] = useState(0)
  const [charCount, setCharCount] = useState(0)
  const textAreaRef = useRef<HTMLTextAreaElement>(null)

  // Auto-save functionality
  useEffect(() => {
    const timer = setTimeout(() => {
      if (notes.trim()) {
        localStorage.setItem(`consultation-notes-${patientName}`, notes)
      }
    }, 1500)
    return () => clearTimeout(timer)
  }, [notes, patientName])

  // Count words and characters
  useEffect(() => {
    const words = notes.trim().split(/\s+/).filter(word => word.length > 0)
    setWordCount(notes.trim() ? words.length : 0)
    setCharCount(notes.length)
  }, [notes])

  // Load saved notes on mount
  useEffect(() => {
    const savedNotes = localStorage.getItem(`consultation-notes-${patientName}`)
    if (savedNotes) {
      setNotes(savedNotes)
    }
    setTimeout(() => {
      if (textAreaRef.current) {
        textAreaRef.current.focus()
      }
    }, 100)
  }, [patientName])

  const saveToDatabase = async () => {
    if (!notes.trim()) return
    setIsSaving(true)
    setIsSaveDropdownOpen(false)

    await new Promise(resolve => setTimeout(resolve, 1200))

    const notesData = {
      patientName,
      notes: notes.trim(),
      timestamp: new Date().toISOString(),
      doctorName: 'Dr. Smith',
      consultationId: `CONS_${Date.now()}`,
      wordCount,
      charCount
    }

    console.log('Saving consultation notes to database:', notesData)
    setIsSaving(false)
    setSavedMessage(true)
    setTimeout(() => setSavedMessage(false), 3000)
  }

  const downloadAsText = async () => {
    if (!notes.trim()) return
    setIsDownloading(true)
    setIsSaveDropdownOpen(false)

    await new Promise(resolve => setTimeout(resolve, 600))

    const exportContent = `BHARAT TELEMED - CONSULTATION NOTES
====================================

Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}
Patient: ${patientName}
Doctor: Dr. Smith
Words: ${wordCount} | Characters: ${charCount}

NOTES:
------

${notes.trim()}

====================================
Generated by Bharat Telemed Platform
Export Time: ${new Date().toLocaleString()}`

    const blob = new Blob([exportContent], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${patientName.replace(/\s+/g, '-')}-consultation-${new Date().toISOString().split('T')[0]}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)

    setIsDownloading(false)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 's' && (e.ctrlKey || e.metaKey)) {
      e.preventDefault()
      saveToDatabase()
    }
  }

  const clearNotes = () => {
    setNotes('')
    localStorage.removeItem(`consultation-notes-${patientName}`)
    setTimeout(() => {
      if (textAreaRef.current) {
        textAreaRef.current.focus()
      }
    }, 100)
  }

  return (
    <div className="h-full flex flex-col bg-white">
      {/* Professional Header */}
      <div className="px-6 py-4 bg-gradient-to-r from-slate-50 to-gray-50 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-emerald-100 rounded-lg flex items-center justify-center">
              <User className="h-5 w-5 text-emerald-600" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">{patientName}</h3>
              <div className="flex items-center space-x-2 text-sm text-gray-500">
                <Clock className="h-3 w-3" />
                <span>{new Date().toLocaleTimeString()}</span>
              </div>
            </div>
          </div>

          <div className="flex items-center space-x-4">
            {notes.trim() && (
              <div className="text-right">
                <div className="text-sm font-medium text-gray-900">{wordCount}</div>
                <div className="text-xs text-gray-500">words</div>
              </div>
            )}

            {notes.trim() && (
              <div className="flex items-center space-x-1 text-xs text-emerald-600 bg-emerald-50 px-2 py-1 rounded-md">
                <div className="w-1.5 h-1.5 bg-emerald-500 rounded-full animate-pulse"></div>
                <span>Saved</span>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Main Writing Area */}
      <div className="flex-1 p-6">
        <div className="h-full relative">
          <textarea
            ref={textAreaRef}
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            onKeyDown={handleKeyPress}
            className="w-full h-full p-0 border-0 resize-none text-base text-gray-900 bg-transparent focus:outline-none focus:ring-0"
            style={{
              fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
              lineHeight: '1.6',
              fontSize: '16px'
            }}
          />

          {!notes.trim() && (
            <div className="absolute inset-0 pointer-events-none">
              <div className="pt-1 text-gray-400 text-base" style={{ lineHeight: '1.6' }}>
                Start writing...
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Action Bar */}
      <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            {charCount > 0 && (
              <div className="text-xs text-gray-500">
                {charCount} characters
              </div>
            )}

            <button
              onClick={clearNotes}
              disabled={!notes.trim()}
              className="flex items-center space-x-1 text-xs text-gray-500 hover:text-red-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <RotateCcw className="h-3 w-3" />
              <span>Clear</span>
            </button>
          </div>

          <div className="relative">
            <button
              onClick={() => setIsSaveDropdownOpen(!isSaveDropdownOpen)}
              disabled={!notes.trim()}
              className="flex items-center space-x-2 px-4 py-2 bg-emerald-600 text-white text-sm font-medium rounded-lg hover:bg-emerald-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 shadow-sm hover:shadow-md"
            >
              {isSaving ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
                  <span>Saving</span>
                </>
              ) : isDownloading ? (
                <>
                  <Download className="h-4 w-4" />
                  <span>Downloading</span>
                </>
              ) : (
                <>
                  <Save className="h-4 w-4" />
                  <span>Save</span>
                  <ChevronDown className={`h-4 w-4 transition-transform duration-200 ${isSaveDropdownOpen ? 'rotate-180' : ''}`} />
                </>
              )}
            </button>

            {/* Save Options Dropdown */}
            {isSaveDropdownOpen && (
              <>
                <div
                  className="fixed inset-0 z-40"
                  onClick={() => setIsSaveDropdownOpen(false)}
                />
                <div className="absolute bottom-full right-0 mb-2 w-56 bg-white rounded-lg shadow-xl border border-gray-200 overflow-hidden z-50">
                  <button
                    onClick={saveToDatabase}
                    disabled={isSaving || !notes.trim()}
                    className="w-full px-4 py-3 text-left hover:bg-gray-50 transition-colors flex items-center space-x-3 border-b border-gray-100 group"
                  >
                    <div className="w-8 h-8 bg-emerald-100 rounded-lg flex items-center justify-center group-hover:bg-emerald-200 transition-colors">
                      <Database className="h-4 w-4 text-emerald-600" />
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-900">Save to Database</div>
                      <div className="text-xs text-gray-500">Secure cloud storage</div>
                    </div>
                  </button>

                  <button
                    onClick={downloadAsText}
                    disabled={isDownloading || !notes.trim()}
                    className="w-full px-4 py-3 text-left hover:bg-gray-50 transition-colors flex items-center space-x-3 group"
                  >
                    <div className="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center group-hover:bg-blue-200 transition-colors">
                      <FileDown className="h-4 w-4 text-blue-600" />
                    </div>
                    <div>
                      <div className="text-sm font-medium text-gray-900">Download Text</div>
                      <div className="text-xs text-gray-500">Export as file</div>
                    </div>
                  </button>
                </div>
              </>
            )}
          </div>
        </div>
      </div>

      {/* Success Notification */}
      {savedMessage && (
        <div className="absolute top-4 left-1/2 transform -translate-x-1/2 bg-emerald-600 text-white px-4 py-2 rounded-lg shadow-lg z-50 flex items-center space-x-2">
          <CheckCircle className="h-4 w-4" />
          <span className="text-sm font-medium">Saved successfully</span>
        </div>
      )}
    </div>
  )
}