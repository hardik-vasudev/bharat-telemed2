-- Add Medicine Coding System to Existing Bharat Telemed Database
-- This adds AC-2-7 prescription coding to your existing structure

-- ====================================
-- MEDICINE FREQUENCY MASTER TABLE
-- ====================================
CREATE TABLE IF NOT EXISTS medicine_frequencies (
    id SERIAL PRIMARY KEY,
    frequency_code VARCHAR(10) NOT NULL UNIQUE,
    frequency_name VARCHAR(50) NOT NULL,
    frequency_symbol VARCHAR(20) NOT NULL, -- e.g., 1-0-0, 1-0-1, 1-1-1
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ====================================
-- MEDICINES MASTER TABLE WITH CODES
-- ====================================
CREATE TABLE IF NOT EXISTS medicines (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    medicine_code VARCHAR(10) NOT NULL UNIQUE, -- AC, IB, AZ, etc.
    medicine_name VARCHAR(255) NOT NULL,
    generic_name VARCHAR(255),
    strength VARCHAR(100), -- 500mg, 250mg, etc.
    form VARCHAR(50), -- tablet, capsule, syrup, injection
    manufacturer VARCHAR(255),
    category VARCHAR(100), -- pain_relief, antibiotic, antacid, etc.
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ====================================
-- PRESCRIPTION MEDICINES TABLE (for individual medicine tracking)
-- ====================================
CREATE TABLE IF NOT EXISTS prescription_medicines (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    prescription_id UUID REFERENCES public.prescriptions(id) ON DELETE CASCADE,
    medicine_id UUID REFERENCES medicines(id) ON DELETE RESTRICT,
    medicine_code VARCHAR(10) NOT NULL,
    medicine_name VARCHAR(255) NOT NULL,

    -- Dosage Information
    dosage VARCHAR(100) NOT NULL, -- "2", "1", "1/2", etc.
    frequency VARCHAR(20) NOT NULL CHECK (frequency IN ('once_daily', 'twice_daily', 'thrice_daily', 'four_times_daily', 'as_needed')),
    frequency_code VARCHAR(10) NOT NULL, -- OD, BD, TDS, QID, SOS
    frequency_symbol VARCHAR(20) NOT NULL, -- 1-0-0, 1-0-1, 1-1-1, SOS
    duration_days INTEGER NOT NULL,
    meal_timing VARCHAR(10) DEFAULT 'after' CHECK (meal_timing IN ('before', 'after', 'with')),

    -- Instructions
    special_instructions TEXT,
    medicine_sequence INTEGER NOT NULL, -- Order in prescription (1, 2, 3...)

    -- Auto-generated prescription code: AC-2-7
    prescription_code VARCHAR(50), -- Generated by trigger

    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ====================================
-- ADD INDEXES
-- ====================================
CREATE INDEX IF NOT EXISTS idx_medicines_code ON medicines(medicine_code);
CREATE INDEX IF NOT EXISTS idx_medicines_name ON medicines(medicine_name);
CREATE INDEX IF NOT EXISTS idx_medicines_category ON medicines(category);
CREATE INDEX IF NOT EXISTS idx_prescription_medicines_prescription_id ON prescription_medicines(prescription_id);
CREATE INDEX IF NOT EXISTS idx_prescription_medicines_medicine_code ON prescription_medicines(medicine_code);
CREATE INDEX IF NOT EXISTS idx_prescription_medicines_prescription_code ON prescription_medicines(prescription_code);
CREATE INDEX IF NOT EXISTS idx_prescription_medicines_sequence ON prescription_medicines(medicine_sequence);

-- ====================================
-- ROW LEVEL SECURITY
-- ====================================
ALTER TABLE medicines ENABLE ROW LEVEL SECURITY;
ALTER TABLE prescription_medicines ENABLE ROW LEVEL SECURITY;

-- Medicines are public (everyone can view)
CREATE POLICY "Anyone can view active medicines" ON medicines
    FOR SELECT USING (is_active = true);

-- Prescription medicines follow same rules as prescriptions
CREATE POLICY "Users can view their prescription medicines" ON prescription_medicines
    FOR SELECT USING (
        prescription_id IN (
            SELECT id FROM prescriptions WHERE patient_id = auth.uid()
        )
    );

-- Doctors can insert prescription medicines for their prescriptions
CREATE POLICY "Doctors can add medicines to prescriptions" ON prescription_medicines
    FOR INSERT WITH CHECK (
        prescription_id IN (
            SELECT id FROM prescriptions WHERE doctor_id IN (
                SELECT id FROM doctors WHERE email = (SELECT email FROM auth.users WHERE id = auth.uid())
            )
        )
    );

-- ====================================
-- FUNCTIONS AND TRIGGERS
-- ====================================

-- Function to generate prescription code: AC-2-7 format
CREATE OR REPLACE FUNCTION generate_prescription_code()
RETURNS TRIGGER AS $$
BEGIN
    -- Extract number from dosage (remove non-numeric characters)
    NEW.prescription_code := NEW.medicine_code || '-' ||
                            REGEXP_REPLACE(NEW.dosage, '[^0-9]', '', 'g') || '-' ||
                            NEW.duration_days::text;

    -- If no number found in dosage, default to 1
    IF REGEXP_REPLACE(NEW.dosage, '[^0-9]', '', 'g') = '' THEN
        NEW.prescription_code := NEW.medicine_code || '-1-' || NEW.duration_days::text;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger for prescription code generation
DROP TRIGGER IF EXISTS trigger_generate_prescription_code ON prescription_medicines;
CREATE TRIGGER trigger_generate_prescription_code
    BEFORE INSERT OR UPDATE ON prescription_medicines
    FOR EACH ROW
    EXECUTE FUNCTION generate_prescription_code();

-- Function to update medicine count in main prescriptions table
CREATE OR REPLACE FUNCTION update_prescription_medicine_count()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- Update the medications JSONB in main prescriptions table
        UPDATE prescriptions
        SET medications = (
            SELECT jsonb_agg(
                jsonb_build_object(
                    'medicine_code', pm.medicine_code,
                    'name', pm.medicine_name,
                    'dosage', pm.dosage,
                    'frequency', pm.frequency,
                    'frequency_symbol', pm.frequency_symbol,
                    'duration_days', pm.duration_days,
                    'meal_timing', pm.meal_timing,
                    'instructions', pm.special_instructions,
                    'prescription_code', pm.prescription_code,
                    'sequence', pm.medicine_sequence
                ) ORDER BY pm.medicine_sequence
            )
            FROM prescription_medicines pm
            WHERE pm.prescription_id = NEW.prescription_id
        )
        WHERE id = NEW.prescription_id;
        RETURN NEW;

    ELSIF TG_OP = 'DELETE' THEN
        -- Update after deletion
        UPDATE prescriptions
        SET medications = (
            SELECT CASE
                WHEN COUNT(*) = 0 THEN '[]'::jsonb
                ELSE jsonb_agg(
                    jsonb_build_object(
                        'medicine_code', pm.medicine_code,
                        'name', pm.medicine_name,
                        'dosage', pm.dosage,
                        'frequency', pm.frequency,
                        'frequency_symbol', pm.frequency_symbol,
                        'duration_days', pm.duration_days,
                        'meal_timing', pm.meal_timing,
                        'instructions', pm.special_instructions,
                        'prescription_code', pm.prescription_code,
                        'sequence', pm.medicine_sequence
                    ) ORDER BY pm.medicine_sequence
                )
            END
            FROM prescription_medicines pm
            WHERE pm.prescription_id = OLD.prescription_id
        )
        WHERE id = OLD.prescription_id;
        RETURN OLD;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger for medicine count update
DROP TRIGGER IF EXISTS trigger_update_medicine_count ON prescription_medicines;
CREATE TRIGGER trigger_update_medicine_count
    AFTER INSERT OR DELETE ON prescription_medicines
    FOR EACH ROW
    EXECUTE FUNCTION update_prescription_medicine_count();

-- Updated trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Add trigger for medicines table
DROP TRIGGER IF EXISTS trigger_medicines_updated_at ON medicines;
CREATE TRIGGER trigger_medicines_updated_at
    BEFORE UPDATE ON medicines
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ====================================
-- INSERT SAMPLE DATA
-- ====================================

-- Medicine frequencies (only if table is empty)
INSERT INTO medicine_frequencies (frequency_code, frequency_name, frequency_symbol, description)
SELECT * FROM (VALUES
    ('OD', 'Once Daily', '1-0-0', 'Take once a day'),
    ('BD', 'Twice Daily', '1-0-1', 'Take twice a day (morning and evening)'),
    ('TDS', 'Thrice Daily', '1-1-1', 'Take three times a day'),
    ('QID', 'Four Times Daily', '1-1-1-1', 'Take four times a day'),
    ('SOS', 'As Needed', 'SOS', 'Take as needed when symptoms occur'),
    ('STAT', 'Immediately', 'STAT', 'Take immediately, single dose'),
    ('HS', 'At Bedtime', 'HS', 'Take at bedtime'),
    ('AC', 'Before Meals', 'AC', 'Take before meals'),
    ('PC', 'After Meals', 'PC', 'Take after meals')
) AS new_data(frequency_code, frequency_name, frequency_symbol, description)
WHERE NOT EXISTS (SELECT 1 FROM medicine_frequencies LIMIT 1);

-- Sample medicines with codes (only if table is empty)
INSERT INTO medicines (medicine_code, medicine_name, generic_name, strength, form, manufacturer, category)
SELECT * FROM (VALUES
    -- Pain & Fever
    ('AC', 'Paracetamol', 'Acetaminophen', '500mg', 'tablet', 'Generic Pharma', 'pain_relief'),
    ('IB', 'Ibuprofen', 'Ibuprofen', '400mg', 'tablet', 'Generic Pharma', 'pain_relief'),
    ('AS', 'Aspirin', 'Acetylsalicylic Acid', '325mg', 'tablet', 'Generic Pharma', 'pain_relief'),
    ('DC', 'Diclofenac', 'Diclofenac Sodium', '50mg', 'tablet', 'Generic Pharma', 'pain_relief'),

    -- Antibiotics
    ('AX', 'Amoxicillin', 'Amoxicillin', '500mg', 'capsule', 'Generic Pharma', 'antibiotic'),
    ('AZ', 'Azithromycin', 'Azithromycin', '250mg', 'tablet', 'Generic Pharma', 'antibiotic'),
    ('CX', 'Cephalexin', 'Cephalexin', '500mg', 'capsule', 'Generic Pharma', 'antibiotic'),
    ('CF', 'Ciprofloxacin', 'Ciprofloxacin', '500mg', 'tablet', 'Generic Pharma', 'antibiotic'),

    -- Digestive
    ('OM', 'Omeprazole', 'Omeprazole', '20mg', 'capsule', 'Generic Pharma', 'antacid'),
    ('RT', 'Ranitidine', 'Ranitidine', '150mg', 'tablet', 'Generic Pharma', 'antacid'),
    ('AL', 'Antacid', 'Aluminum + Magnesium Hydroxide', '10ml', 'syrup', 'Generic Pharma', 'antacid'),

    -- Allergy
    ('CT', 'Cetirizine', 'Cetirizine', '10mg', 'tablet', 'Generic Pharma', 'antihistamine'),
    ('LT', 'Loratadine', 'Loratadine', '10mg', 'tablet', 'Generic Pharma', 'antihistamine'),

    -- Cough & Cold
    ('CS', 'Cough Syrup', 'Dextromethorphan', '10mg/5ml', 'syrup', 'Generic Pharma', 'cough_cold'),
    ('DH', 'Dextromethorphan', 'Dextromethorphan HBr', '15mg', 'tablet', 'Generic Pharma', 'cough_cold'),

    -- Vitamins
    ('VD', 'Vitamin D3', 'Cholecalciferol', '60000IU', 'capsule', 'Generic Pharma', 'vitamin'),
    ('VB', 'Vitamin B Complex', 'B-Complex', '1 tablet', 'tablet', 'Generic Pharma', 'vitamin'),
    ('MV', 'Multivitamin', 'Multivitamin', '1 tablet', 'tablet', 'Generic Pharma', 'vitamin'),

    -- Emergency
    ('OR', 'ORS', 'Oral Rehydration Salts', '1 packet', 'powder', 'Generic Pharma', 'emergency'),
    ('IN', 'Insulin', 'Human Insulin', '100IU/ml', 'injection', 'Generic Pharma', 'diabetes')
) AS new_medicines(medicine_code, medicine_name, generic_name, strength, form, manufacturer, category)
WHERE NOT EXISTS (SELECT 1 FROM medicines LIMIT 1);

-- ====================================
-- UTILITY FUNCTIONS FOR FRONTEND
-- ====================================

-- Function to add medicine to prescription (called from frontend)
CREATE OR REPLACE FUNCTION add_medicine_to_prescription(
    p_prescription_id UUID,
    p_medicine_code VARCHAR(10),
    p_dosage VARCHAR(100),
    p_frequency VARCHAR(20),
    p_duration_days INTEGER,
    p_meal_timing VARCHAR(10) DEFAULT 'after',
    p_special_instructions TEXT DEFAULT NULL
) RETURNS UUID AS $$
DECLARE
    v_medicine_id UUID;
    v_medicine_name VARCHAR(255);
    v_frequency_symbol VARCHAR(20);
    v_sequence INTEGER;
    v_prescription_medicine_id UUID;
BEGIN
    -- Get medicine details
    SELECT id, medicine_name INTO v_medicine_id, v_medicine_name
    FROM medicines
    WHERE medicine_code = p_medicine_code AND is_active = true;

    IF v_medicine_id IS NULL THEN
        RAISE EXCEPTION 'Medicine with code % not found', p_medicine_code;
    END IF;

    -- Get frequency symbol
    SELECT frequency_symbol INTO v_frequency_symbol
    FROM medicine_frequencies
    WHERE frequency_code = CASE
        WHEN p_frequency = 'once_daily' THEN 'OD'
        WHEN p_frequency = 'twice_daily' THEN 'BD'
        WHEN p_frequency = 'thrice_daily' THEN 'TDS'
        WHEN p_frequency = 'four_times_daily' THEN 'QID'
        WHEN p_frequency = 'as_needed' THEN 'SOS'
        ELSE 'BD' -- Default to twice daily
    END;

    -- Get next sequence number
    SELECT COALESCE(MAX(medicine_sequence), 0) + 1 INTO v_sequence
    FROM prescription_medicines
    WHERE prescription_id = p_prescription_id;

    -- Insert medicine
    INSERT INTO prescription_medicines (
        prescription_id, medicine_id, medicine_code, medicine_name,
        dosage, frequency, frequency_code, frequency_symbol, duration_days,
        meal_timing, special_instructions, medicine_sequence
    ) VALUES (
        p_prescription_id, v_medicine_id, p_medicine_code, v_medicine_name,
        p_dosage, p_frequency,
        CASE
            WHEN p_frequency = 'once_daily' THEN 'OD'
            WHEN p_frequency = 'twice_daily' THEN 'BD'
            WHEN p_frequency = 'thrice_daily' THEN 'TDS'
            WHEN p_frequency = 'four_times_daily' THEN 'QID'
            WHEN p_frequency = 'as_needed' THEN 'SOS'
            ELSE 'BD'
        END,
        v_frequency_symbol, p_duration_days,
        p_meal_timing, p_special_instructions, v_sequence
    ) RETURNING id INTO v_prescription_medicine_id;

    RETURN v_prescription_medicine_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get all medicines for dropdown
CREATE OR REPLACE FUNCTION get_active_medicines()
RETURNS TABLE (
    medicine_code VARCHAR(10),
    medicine_name VARCHAR(255),
    generic_name VARCHAR(255),
    strength VARCHAR(100),
    form VARCHAR(50),
    category VARCHAR(100)
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        m.medicine_code,
        m.medicine_name,
        m.generic_name,
        m.strength,
        m.form,
        m.category
    FROM medicines m
    WHERE m.is_active = true
    ORDER BY m.medicine_name;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ====================================
-- SUCCESS MESSAGE
-- ====================================
DO $$
BEGIN
    RAISE NOTICE '✅ Medicine Coding System Added Successfully!';
    RAISE NOTICE '📋 Tables: medicines, prescription_medicines, medicine_frequencies';
    RAISE NOTICE '💊 Medicine Codes: AC (Paracetamol), IB (Ibuprofen), AZ (Azithromycin)...';
    RAISE NOTICE '🏷️  Prescription Format: AC-2-7 (medicine-dosage-days)';
    RAISE NOTICE '🔗 Integrated with existing prescriptions table';
    RAISE NOTICE '🔒 Row Level Security enabled';
    RAISE NOTICE '';
    RAISE NOTICE '📖 Usage:';
    RAISE NOTICE '   SELECT add_medicine_to_prescription(prescription_id, ''AC'', ''2'', ''twice_daily'', 7);';
    RAISE NOTICE '   SELECT * FROM get_active_medicines();';
END
$$;